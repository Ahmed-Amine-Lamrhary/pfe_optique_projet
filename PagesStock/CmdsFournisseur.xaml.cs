using MenuWithSubMenu.Model;
using MenuWithSubMenu.Utils;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace MenuWithSubMenu.PagesStock
{
    /// <summary>
    /// Logique d'interaction pour CmdsFournisseur.xaml
    /// </summary>
    public partial class CmdsFournisseur : Page
    {
        dbEntities db;
        List<cmdfournisseur> listCmdFourni;

        private List<cmdfournisseur> checkedCmd = new List<cmdfournisseur>();

        DbContextTransaction transaction;

        DateTime? startDate;
        DateTime? endDate;

        int count;

        public CmdsFournisseur()
        {

            InitializeComponent();

            db = new dbEntities();
            getCmdFourni(0);
        }

        private async Task getCmdFourni(int skip)
        {
            loadingBox.Visibility = Visibility.Visible;
            infoBox.Visibility = Visibility.Collapsed;
            nothingBox.Visibility = Visibility.Collapsed;

            try
            {
                if (startDate != null && endDate != null)
                {
                    listCmdFourni = await Task.Run(() => db.cmdfournisseurs.Where(c => c.DateEntree <= endDate && c.DateEntree >= startDate).ToList());
                }
                else if (startDate == null && endDate != null)
                    listCmdFourni = await Task.Run(() => db.cmdfournisseurs.Where(c => c.DateEntree <= endDate).ToList());
                else if (startDate != null && endDate == null)
                    listCmdFourni = await Task.Run(() => db.cmdfournisseurs.Where(c => c.DateEntree >= startDate).ToList());
                else
                    listCmdFourni = await Task.Run(() => db.cmdfournisseurs.ToList());

                // get states of orders
                foreach (cmdfournisseur cmd in listCmdFourni)
                {
                    List<lignecommande> lignes = await Task.Run(() => db.lignecommandes.Where(l => l.idCmdFournisseur == cmd.idCmdFournisseur).ToList());
                    int lignesNonPayee = 0;
                    foreach (lignecommande ligne in lignes)
                    {
                        if (ligne.EtatCmd == "En-Cours")
                            lignesNonPayee++;
                    }

                    if (lignesNonPayee == 0)
                        cmd.etatCmd = "Livrée";
                    else
                        cmd.etatCmd = "Non Livrée (" + lignesNonPayee + " lignes non livrée)";
                }

                count = (int)Math.Ceiling((decimal)listCmdFourni.Count / 10);
                pagination.MaxPageCount = count;
                cmdFourniDataGrid.ItemsSource = listCmdFourni.Skip(skip).Take(10);
                infoBox.Visibility = Visibility.Visible;
            }
            catch (Exception exp)
            {
                Console.WriteLine(exp.Message);
                nothingBox.Visibility = Visibility.Visible;
            }
            finally
            {
                loadingBox.Visibility = Visibility.Collapsed;
            }
        }


        private void DataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            var grid = (DataGrid)sender;
            foreach (var item in grid.Columns)
            {
                if (item.Header.ToString() == "Edit")
                {
                    item.DisplayIndex = grid.Columns.Count - 1;
                    break;
                }
            }
        }

        private void AddPresetButton_Click(object sender, RoutedEventArgs e)
        {
            var addButton = sender as FrameworkElement;
            if (addButton != null)
            {
                addButton.ContextMenu.IsOpen = true;
            }
        }

        private void voirCmd(object sender, RoutedEventArgs e)
        {
            cmdfournisseur cmd = cmdFourniDataGrid.SelectedItem as cmdfournisseur;

            AddCmd addCmd = new AddCmd(cmd);

            MyContext.navigateTo(addCmd);
        }

        private void deleteCmd(object sender, RoutedEventArgs e)
        {

            /*try
            {
                DbContextTransaction transaction = db.Database.BeginTransaction();
                article articleRow = cmdFourniDataGrid.SelectedItem as article;

                db.ordonnances.RemoveRange(db.ordonnances.Where(r => r.article_cin == articleRow.cin));
                db.SaveChanges();

                db.visites.RemoveRange(db.visites.Where(r => r.article_cin == articleRow.cin));
                db.SaveChanges();

                db.articles.Remove(articleRow);
                db.SaveChanges();

                transaction.Commit();

                System.Windows.MessageBox.Show("Success");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }*/


        }
        private void addCmd(object sender, RoutedEventArgs e)
        {
            AddCmd add_cmd = new AddCmd();
            MyContext.navigateTo(add_cmd);
        }

        private void page_PageUpdated(object sender, HandyControl.Data.FunctionEventArgs<int> e)
        {
            getCmdFourni((e.Info - 1) * 10);
        }

        private void checkCmd(object sender, RoutedEventArgs e)
        {
            CheckBox checkBox = (CheckBox)e.OriginalSource;
            DataGridRow dataGridRow = VisualTreeHelpers.FindAncestor<DataGridRow>(checkBox);
            cmdfournisseur cmd = (cmdfournisseur)dataGridRow.DataContext;

            checkedCmd.Add(cmd);

            if (checkedCmd.Count() > 0)
                groupInfo.Visibility = Visibility.Visible;
            else
                groupInfo.Visibility = Visibility.Collapsed;
        }

        private void unCheckCmd(object sender, RoutedEventArgs e)
        {
            CheckBox checkBox = (CheckBox)e.OriginalSource;
            DataGridRow dataGridRow = VisualTreeHelpers.FindAncestor<DataGridRow>(checkBox);
            cmdfournisseur cmd = (cmdfournisseur)dataGridRow.DataContext;

            checkedCmd.Remove(cmd);

            if (checkedCmd.Count() > 0)
                groupInfo.Visibility = Visibility.Visible;
            else
                groupInfo.Visibility = Visibility.Collapsed;
        }

        private void verifyOrders(object sender, RoutedEventArgs e)
        {
            try
            {
                transaction = db.Database.BeginTransaction();

                foreach (cmdfournisseur cmd in checkedCmd)
                {
                    List<lignecommande> lignes = db.lignecommandes.Where(l => l.idCmdFournisseur == cmd.idCmdFournisseur).ToList();

                    foreach (lignecommande ligne in lignes)
                    {
                        if (ligne.EtatCmd == "verified")
                            continue;

                        ligne.EtatCmd = "verified";
                        db.SaveChanges();

                        if (ligne.idArticle != null)
                        {
                            article article = db.articles.Where(a => a.idArticle == ligne.idArticle).SingleOrDefault();
                            article.QteDisponible += ligne.Qte_Commande;
                            db.SaveChanges();
                        }
                    }
                }

                transaction.Commit();
            } catch(Exception)
            {
                transaction.Rollback();
                MessageBox.Show("Erreur");
            } 
        }

        private void filterByDate(object sender, RoutedEventArgs e)
        {
            try
            {
                startDate = (DateTime)filterStartDate.SelectedDate;
                endDate = (DateTime)filterEndDate.SelectedDate;

                filterByDateFunc();
            }
            catch (Exception)
            {
                startDate = endDate = null;
                getCmdFourni(0);
            }
        }

        private void resetFilter(object sender, RoutedEventArgs e)
        {
            startDate = endDate = null;
            filterStartDate.SelectedDate = filterEndDate.SelectedDate = null;

            getCmdFourni(0);
        }

        private void selectLastDate(object sender, SelectionChangedEventArgs e)
        {
            endDate = DateTime.Now;

            switch (lastDate.SelectedIndex)
            {
                // last day
                case 0:
                    startDate = DateTime.Today.AddDays(-1);
                    break;
                // last week
                case 1:
                    startDate = DateTime.Today.AddDays(-7);
                    break;
                // last month
                case 2:
                    startDate = DateTime.Today.AddMonths(-1);
                    break;
                // last year
                case 3:
                    startDate = DateTime.Today.AddYears(-1);
                    break;
            }

            filterByDateFunc();
        }

        private void filterByDateFunc()
        {
            try
            {
                if (startDate <= endDate)
                    getCmdFourni(0);
                else
                {
                    MessageBox.Show("start date must be less than end date");

                    startDate = endDate = null;
                    filterStartDate.SelectedDate = filterEndDate.SelectedDate = null;
                }
            }
            catch (Exception)
            {
                startDate = endDate = null;
                getCmdFourni(0);
            }
        }

        private void deleteMany(object sender, RoutedEventArgs e)
        {
            DbContextTransaction transaction = db.Database.BeginTransaction();
            try
            {
                foreach (cmdfournisseur cmdfournisseur in checkedCmd)
                {
                    db.cmdfournisseurs.Remove(cmdfournisseur);
                    db.SaveChanges();
                }

                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                System.Windows.MessageBox.Show("Erreur");
            }
        }
    }
}
