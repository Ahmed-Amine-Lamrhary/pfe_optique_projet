using MenuWithSubMenu.Model;
using MenuWithSubMenu.Utils;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Windows;
using System.Windows.Controls;

namespace MenuWithSubMenu.PagesStock
{
    public partial class CmdsClients : Page
    {
        dbEntities db;
        List<cmdclient> listCmdClients;
        List<cmdclient> selectedListCmdClients;

        int count;

        public CmdsClients()
        {
            InitializeComponent();

            db = new dbEntities();
            listCmdClients = new List<cmdclient>();
            selectedListCmdClients = new List<cmdclient>();

            getCmdClients(0);
        }

        private async void getCmdClients(int skip)
        {
            loadingBox.Visibility = Visibility.Visible;
            cmdClientsDataGrid.Visibility = Visibility.Collapsed;
            nothingBox.Visibility = Visibility.Collapsed;

            try
            {
                listCmdClients = await db.cmdclients.ToListAsync();

                count = (int)Math.Ceiling((decimal)listCmdClients.Count / 10);
                pagination.MaxPageCount = count;
                cmdClientsDataGrid.ItemsSource = listCmdClients.Skip(skip).Take(10);

                cmdClientsDataGrid.Visibility = Visibility.Visible;
            }
            catch (Exception exp)
            {
                Console.WriteLine(exp.Message);
                nothingBox.Visibility = Visibility.Visible;
            }
            finally
            {
                loadingBox.Visibility = Visibility.Collapsed;
            }
        }


        private void DataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            var grid = (DataGrid)sender;
            foreach (var item in grid.Columns)
            {
                if (item.Header.ToString() == "Edit")
                {
                    item.DisplayIndex = grid.Columns.Count - 1;
                    break;
                }
            }
        }

        private void AddPresetButton_Click(object sender, RoutedEventArgs e)
        {
            var addButton = sender as FrameworkElement;
            if (addButton != null)
            {
                addButton.ContextMenu.IsOpen = true;
            }
        }

        private void voirCmd(object sender, RoutedEventArgs e)
        {
            // cmdfournisseur cmd = cmdFourniDataGrid.SelectedItem as cmdfournisseur;
            // int cmdId = cmd.idCmdFournisseur;

            // CmdsLigne cmdAbout = new CmdsLigne(cmdId);


            // MyContext.navigateTo(cmdAbout);
        }

        private void updateCmd(object sender, RoutedEventArgs e)
        {
            cmdclient cmdRow = cmdClientsDataGrid.SelectedItem as cmdclient;
            int cmdId = cmdRow.idCmdClient;
            AddCmdClient update = new AddCmdClient(db.cmdclients.Where(cmd => cmd.idCmdClient == cmdId).SingleOrDefault());
            MyContext.navigateTo(update);
        }
        private void deleteCmd(object sender, RoutedEventArgs e)
        {

            /*try
            {
                DbContextTransaction transaction = db.Database.BeginTransaction();
                article articleRow = cmdFourniDataGrid.SelectedItem as article;

                db.ordonnances.RemoveRange(db.ordonnances.Where(r => r.article_cin == articleRow.cin));
                db.SaveChanges();

                db.visites.RemoveRange(db.visites.Where(r => r.article_cin == articleRow.cin));
                db.SaveChanges();

                db.articles.Remove(articleRow);
                db.SaveChanges();

                transaction.Commit();

                System.Windows.MessageBox.Show("Success");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }*/


        }
        private void addCmd(object sender, RoutedEventArgs e)
        {
            AddCmdClient add_cmd_client = new AddCmdClient();
            MyContext.navigateTo(add_cmd_client);
        }

        private void deleteCmds(object sender, RoutedEventArgs e)
        {

        }

        private void page_PageUpdated(object sender, HandyControl.Data.FunctionEventArgs<int> e)
        {
            getCmdClients((e.Info - 1) * 10);
        }

        private void CheckBox_Checked(object sender, RoutedEventArgs e)
        {
            
        }
    }
}
