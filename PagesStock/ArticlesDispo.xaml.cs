using MenuWithSubMenu.Model;
using MenuWithSubMenu.Utils;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace MenuWithSubMenu.PagesStock
{
    /// <summary>
    /// Logique d'interaction pour ArticlesDispo.xaml
    /// </summary>
    public partial class ArticlesDispo : Page
    {
        dbEntities db;
        List<article> listArticle;
        int count;

        private Page prevPage;

        public ArticlesDispo()
        {

            InitializeComponent();
            returnBtn.Visibility = Visibility.Collapsed;
            db = new dbEntities();
            searchBar.Text = "";
            getArticles(0);
        }

        public ArticlesDispo(Page prevP)
        {

            InitializeComponent();
            prevPage = prevP;
            db = new dbEntities();
            searchBar.Text = "";
            getArticles(0);
        }

        private async Task getArticles(int skip)
        {
            loadingBox.Visibility = Visibility.Visible;
            infoBox.Visibility = Visibility.Collapsed;
            nothingBox.Visibility = Visibility.Collapsed;

            try
            {
                if (searchBar.Text != "")
                    listArticle = await Task.Run(() => db.articles.Where(c => c.idArticle.Contains(searchBar.Text)).ToList());
                else
                    listArticle = await Task.Run(() => db.articles.ToList());

                if (listArticle.Count() == 0)
                {
                    nothingBox.Visibility = Visibility.Visible;
                    return;
                }

                // get types of articles
                foreach (article article in listArticle)
                {
                    if (article.idCategorie == 2)
                        article.typeArticle = "Lunette Solaire";
                    else
                        article.typeArticle = "Lunette Médicale";
                }

                count = (int)Math.Ceiling((decimal)listArticle.Count / 10);
                pagination.MaxPageCount = count;
                articlesDataGrid.ItemsSource = listArticle.Skip(skip).Take(10);
                infoBox.Visibility = Visibility.Visible;

            }
            catch (Exception exp)
            {
                Console.WriteLine(exp.Message);
                nothingBox.Visibility = Visibility.Visible;
            }
            finally
            {
                loadingBox.Visibility = Visibility.Collapsed;
            }
        }


        private void DataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            var grid = (DataGrid)sender;
            foreach (var item in grid.Columns)
            {
                if (item.Header.ToString() == "Edit")
                {
                    item.DisplayIndex = grid.Columns.Count - 1;
                    break;
                }
            }
        }

        private void AddPresetButton_Click(object sender, RoutedEventArgs e)
        {
            var addButton = sender as FrameworkElement;
            if (addButton != null)
            {
                addButton.ContextMenu.IsOpen = true;
            }
        }

        private void page_PageUpdated(object sender, HandyControl.Data.FunctionEventArgs<int> e)
        {
            getArticles((e.Info - 1) * 10);
        }

        private void SearchBar_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (searchBar.Text != "") cancelFocus.Visibility = Visibility.Visible;
            else cancelFocus.Visibility = Visibility.Collapsed;

            getArticles(0);
        }

        private void CancelFocus_Click(object sender, RoutedEventArgs e)
        {
            searchBar.Text = "";
        }

        private void ReturnBtn_Click(object sender, RoutedEventArgs e)
        {
            MyContext.navigateTo(prevPage);
        }
    }
}
