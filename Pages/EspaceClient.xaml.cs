using HandyControl.Controls;
using MenuWithSubMenu.Model;
using MenuWithSubMenu.Utils;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace MenuWithSubMenu.Pages
{
    /// <summary>
    /// Interaction logic for EspaceClient.xaml
    /// </summary>
    public partial class EspaceClient : Page
    {
        dbEntities db;
        List<client> listClient;
        int count;

        public EspaceClient()
        {

            InitializeComponent();
           
            db = new dbEntities();
            searchBar.Text = "";
            getClients(0);
        }

        private void getClients(int skip)
        {
            loadingBox.Visibility = Visibility.Visible;
            clientsDataGrid.Visibility = Visibility.Hidden;

            try
            {
                listClient = searchBar.Text != "" ? db.clients.Where(c => c.nom.Contains(searchBar.Text) || c.prenom.Contains(searchBar.Text) || c.cin.Contains(searchBar.Text) || c.email.Contains(searchBar.Text)).ToList() :  db.clients.ToList();

                count = (int)Math.Ceiling((decimal)listClient.Count / 10);
                pagination.MaxPageCount = count;
                clientsDataGrid.ItemsSource = listClient.Skip(skip).Take(10);
                
            }
            catch (Exception exp)
            {
                Console.WriteLine(exp.Message);
            }
            finally
            {
                loadingBox.Visibility = Visibility.Hidden;
                clientsDataGrid.Visibility = Visibility.Visible;
            }
        }


        private void DataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            var grid = (DataGrid)sender;
            foreach (var item in grid.Columns)
            {
                if (item.Header.ToString() == "Edit")
                {
                    item.DisplayIndex = grid.Columns.Count - 1;
                    break;
                }
            }
        }

        private void AddPresetButton_Click(object sender, RoutedEventArgs e)
        {
            var addButton = sender as FrameworkElement;
            if (addButton != null)
            {
                addButton.ContextMenu.IsOpen = true;
            }
        }

        private void voirClient(object sender, RoutedEventArgs e)
        {
            client clientRow = clientsDataGrid.SelectedItem as client;  
            string clientCin = clientRow.cin;

            ClientProfile clientProfile = new ClientProfile(clientCin, this);


            MyContext.navigateTo(clientProfile);
        }

        private void updateClient(object sender, RoutedEventArgs e)
        {

            client clientRow = clientsDataGrid.SelectedItem as client;
            string clientCin = clientRow.cin;
            UpdateClient update = new UpdateClient(db.clients.Where(client => client.cin == clientCin).SingleOrDefault(), this);
            MyContext.navigateTo(update);
        }
        private void deleteClient(object sender, RoutedEventArgs e)
        {

            /*try
            {
                DbContextTransaction transaction = db.Database.BeginTransaction();
                client clientRow = clientsDataGrid.SelectedItem as client;

                db.ordonnances.RemoveRange(db.ordonnances.Where(r => r.client_cin == clientRow.cin));
                db.SaveChanges();

                db.visites.RemoveRange(db.visites.Where(r => r.client_cin == clientRow.cin));
                db.SaveChanges();

                db.clients.Remove(clientRow);
                db.SaveChanges();

                transaction.Commit();

                System.Windows.MessageBox.Show("Success");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }*/
     
            
        }
        private void addClient(object sender, RoutedEventArgs e)
        {
            AddClient add_Client = new AddClient(this);
            MyContext.navigateTo(add_Client);
        }

        private void ajouterVisite(object sender, RoutedEventArgs e)
        {

            client clientRow = clientsDataGrid.SelectedItem as client;
            string clientCin = clientRow.cin;

            AddVisite addVisite = new AddVisite(clientCin);
            MyContext.navigateTo(addVisite);
        }
        private void page_PageUpdated(object sender, HandyControl.Data.FunctionEventArgs<int> e)
        {

            getClients((e.Info-1) * 10);
        }

        private void SearchBar_TextChanged(object sender, TextChangedEventArgs e)
        {
            getClients(0);
            
        }

        private void CancelFocus_Click(object sender, RoutedEventArgs e)
        {
            searchBar.Text = "";
        }
    }
}
