using HandyControl.Controls;
using MenuWithSubMenu.Model;
using MenuWithSubMenu.Utils;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace MenuWithSubMenu.Pages
{
    public partial class EspaceClient : Page
    {
        dbEntities db;
        List<client> listClient;
        int count;

        private List<client> checkedClients = new List<client>();

        private Page prevPage;

        public EspaceClient()
        {

            InitializeComponent();

            returnBtn.Visibility = Visibility.Collapsed;

            db = new dbEntities();
            listClient = new List<client>();
            pagination.MaxPageCount = 0;
            searchBar.Text = "";

            getClients(0);
        }

        public EspaceClient(Page prevP)
        {
            InitializeComponent();

            prevPage = prevP;

            db = new dbEntities();
            listClient = new List<client>();
            pagination.MaxPageCount = 0;
            searchBar.Text = "";

            getClients(0);
        }

        private async void getClients(int skip)
        {
            loadingBox.Visibility = Visibility.Visible;
            clientsDataGrid.Visibility = Visibility.Collapsed;
            nothingBox.Visibility = Visibility.Collapsed;

            try
            {
                if (searchBar.Text != "")
                    listClient = await db.clients.Where(c => c.nom.Contains(searchBar.Text) || c.prenom.Contains(searchBar.Text) || c.cin.Contains(searchBar.Text) || c.email.Contains(searchBar.Text)).ToListAsync();
                else
                    listClient = await db.clients.ToListAsync();

                if (listClient.Count() == 0)
                {
                    nothingBox.Visibility = Visibility.Visible;
                    return;
                }

                count = (int)Math.Ceiling((decimal)listClient.Count / 10);
                pagination.MaxPageCount = count;
                clientsDataGrid.ItemsSource = listClient.Skip(skip).Take(10);
                clientsDataGrid.Visibility = Visibility.Visible;
            }
            catch (Exception exp)
            {
                Console.WriteLine(exp.Message);
                nothingBox.Visibility = Visibility.Visible;
            }
            finally
            {
                loadingBox.Visibility = Visibility.Collapsed;
            }
        }


        private void DataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            var grid = (DataGrid)sender;
            foreach (var item in grid.Columns)
            {
                if (item.Header.ToString() == "Edit")
                {
                    item.DisplayIndex = grid.Columns.Count - 1;
                    break;
                }
            }
        }

        private void AddPresetButton_Click(object sender, RoutedEventArgs e)
        {
            var addButton = sender as FrameworkElement;
            if (addButton != null)
            {
                addButton.ContextMenu.IsOpen = true;
            }
        }

        private void voirClient(object sender, RoutedEventArgs e)
        {
            client clientRow = clientsDataGrid.SelectedItem as client;  
            string clientCin = clientRow.cin;

            ClientProfile clientProfile = new ClientProfile(clientCin, this);


            MyContext.navigateTo(clientProfile);
        }

        private void updateClient(object sender, RoutedEventArgs e)
        {

            client clientRow = clientsDataGrid.SelectedItem as client;
            string clientCin = clientRow.cin;
            UpdateClient update = new UpdateClient(db.clients.Where(client => client.cin == clientCin).SingleOrDefault(), this);
            MyContext.navigateTo(update);
        }

        private void addClient(object sender, RoutedEventArgs e)
        {
            AddClient add_Client = new AddClient(this);
            MyContext.navigateTo(add_Client);
        }

        private void ajouterVisite(object sender, RoutedEventArgs e)
        {

            client clientRow = clientsDataGrid.SelectedItem as client;
            string clientCin = clientRow.cin;

            AddVisite addVisite = new AddVisite(clientCin, this);
            MyContext.navigateTo(addVisite);
        }
        
        private void page_PageUpdated(object sender, HandyControl.Data.FunctionEventArgs<int> e)
        {
            getClients((e.Info-1) * 10);
        }

        private void SearchBar_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (searchBar.Text != "") cancelFocus.Visibility = Visibility.Visible;
            else cancelFocus.Visibility = Visibility.Collapsed;

            getClients(0);
        }

        private void CancelFocus_Click(object sender, RoutedEventArgs e)
        {
            searchBar.Text = "";
        }

        private void checkCmd(object sender, RoutedEventArgs e)
        {
            CheckBox checkBox = (CheckBox)e.OriginalSource;
            DataGridRow dataGridRow = VisualTreeHelpers.FindAncestor<DataGridRow>(checkBox);
            client client = (client)dataGridRow.DataContext;

            checkedClients.Add(client);

            if (checkedClients.Count() > 0)
                groupInfo.Visibility = Visibility.Visible;
            else
                groupInfo.Visibility = Visibility.Collapsed;
        }

        private void unCheckCmd(object sender, RoutedEventArgs e)
        {
            CheckBox checkBox = (CheckBox)e.OriginalSource;
            DataGridRow dataGridRow = VisualTreeHelpers.FindAncestor<DataGridRow>(checkBox);
            client client = (client)dataGridRow.DataContext;

            checkedClients.Remove(client);

            if (checkedClients.Count() > 0)
                groupInfo.Visibility = Visibility.Visible;
            else
                groupInfo.Visibility = Visibility.Collapsed;
        }

        private void deleteMany(object sender, RoutedEventArgs e)
        {
            DbContextTransaction transaction = db.Database.BeginTransaction();
            try
            {
                foreach (client client in checkedClients)
                {
                    db.clients.Remove(client);
                    db.SaveChanges();
                }

                transaction.Commit();

                groupInfo.Visibility = Visibility.Collapsed;
                getClients(0);
            }
            catch (Exception)
            {
                transaction.Rollback();
                HandyControl.Controls.MessageBox.Show("Erreur");
            }
        }


        private void ReturnBtn_Click(object sender, RoutedEventArgs e)
        {
            MyContext.navigateTo(prevPage);
        }

    }
}
